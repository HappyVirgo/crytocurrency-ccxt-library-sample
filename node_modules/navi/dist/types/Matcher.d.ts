import { Resolvable } from './Resolvable';
import { Chunk } from './Chunks';
import { NaviRequest } from './NaviRequest';
export declare type Matcher<ParentContext extends object, ChildContext extends object = ParentContext> = (child?: MatcherGenerator<ChildContext>) => MatcherGenerator<ParentContext>;
export interface ResolvableMatcher<Context extends object = any> extends Resolvable<Matcher<Context>, Context> {
}
export declare type MatcherGenerator<Context extends object> = (request: NaviRequest<Context>) => MatcherIterator;
export declare type MatcherIterator = IterableIterator<Chunk[]>;
export declare function createMatcherIterator<Context extends object>(matcherGenerator: MatcherGenerator<Context>, request: NaviRequest<Context>, pattern?: string): MatcherIterator;
export declare function concatMatcherIterators(x: MatcherIterator, y: MatcherIterator): Generator<Chunk[], void, unknown>;
