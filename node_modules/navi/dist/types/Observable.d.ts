export interface Subscription {
    closed: boolean;
    unsubscribe: () => void;
}
export interface Observable<T> {
    subscribe(observer: Observer<T>): Subscription;
    subscribe(onNext: (value: T) => void, onError?: (error: any) => void, onComplete?: () => void): Subscription;
}
export interface Observer<T> {
    start?(subscription: Subscription): void;
    next(value: T): void;
    error?(errorValue: any): void;
    complete?(): void;
}
export declare class SimpleSubscription implements Subscription {
    closed: boolean;
    private close;
    private observer;
    constructor(close: (observer: Observer<any>) => void, observer: Observer<any>);
    unsubscribe(): void;
}
export declare function createOrPassthroughObserver<T>(onNextOrObserver: Observer<T> | ((value: T) => void), onError?: (error: any) => void, onComplete?: () => void): Observer<T>;
export declare function createPromiseFromObservable<T>(observable: Observable<T>): Promise<T>;
