import { NaviRequest } from './NaviRequest';
import { Chunk } from './Chunks';
export declare type Resolvable<T, Context extends object = any, U = any> = (request: NaviRequest<Context>, context: Context, arg?: U) => (T | PromiseLike<{
    default: T;
} | T>);
export default function resolveChunks<T>(maybeResolvable: T | Resolvable<T>, request: NaviRequest, createChunks: (value: T) => Chunk[] | IterableIterator<Chunk[]>): IterableIterator<Chunk[]>;
export declare function isPromiseLike<T>(x: PromiseLike<{
    default: T;
} | T> | T): x is PromiseLike<{
    default: T;
} | T>;
export declare function extractDefault<T>(value: {
    default: T;
} | T): T;
