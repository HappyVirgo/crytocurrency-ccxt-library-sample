import { Matcher } from './Matcher';
import { Route } from './Route';
import { URLDescriptor } from './URLTools';
export interface ResolveOptions<Context extends object = any> {
    routes: Matcher<Context>;
    /**
     * If provided, this part of any URLs will be ignored. This is useful
     * for mounting a Navi app in a subdirectory on a domain.
     */
    basename?: string;
    context?: Context;
    body?: any;
    headers?: {
        [name: string]: string;
    };
    method?: string;
    followRedirects?: boolean;
}
export interface ResolveOptionsWithSingleURL<Context extends object = any> extends ResolveOptions<Context> {
    url: string | Partial<URLDescriptor>;
    urls?: never;
}
export interface ResolveOptionsWithManyURLs<Context extends object = any> extends ResolveOptions<Context> {
    url?: never;
    urls: (string | Partial<URLDescriptor>)[];
}
export declare function resolve<Context extends object = any>(options: ResolveOptionsWithSingleURL<Context>): Promise<Route>;
export declare function resolve<Context extends object = any>(options: ResolveOptionsWithManyURLs<Context>): Promise<Route[]>;
