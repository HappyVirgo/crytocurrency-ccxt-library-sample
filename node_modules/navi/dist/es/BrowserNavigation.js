var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { createBrowserHistory } from 'history';
import { Navigation } from './Navigation';
export function createBrowserNavigation(options) {
    // If there's a server state on the window object, use it and then remove
    // it so that it won't be picked up by any nested navigation objects.
    if (!options.state &&
        typeof window !== undefined &&
        window['__NAVI_STATE__']) {
        options.state = window['__NAVI_STATE__'];
        delete window['__NAVI_STATE__'];
    }
    var history = options.history || createBrowserHistory();
    if (options.state) {
        history.replace(__assign(__assign({}, history.location), { state: options.state }));
    }
    var navigation = new Navigation({
        history: history,
        basename: options.basename,
        context: options.context,
        routes: options.routes,
        trailingSlash: options.trailingSlash,
    });
    navigation.refresh();
    return navigation;
}
//# sourceMappingURL=BrowserNavigation.js.map