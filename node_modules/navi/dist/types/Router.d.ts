import { Matcher } from './Matcher';
import { ChunkListObservable } from './ChunkListObservable';
import { ChunksMapObservable } from './ChunksMapObservable';
import { Route } from './Route';
import { Chunk } from './Chunks';
import { SiteMap, RouteMap } from './Maps';
import { URLDescriptor } from './URLTools';
import { Crawler } from './Crawler';
export interface RouterOptions<Context extends object> {
    context?: Context;
    routes?: Matcher<Context>;
    basename?: string;
}
export interface RouterResolveOptions {
    followRedirects?: boolean;
    body?: any;
    headers?: {
        [name: string]: string;
    };
    method?: string;
    url?: string | URLDescriptor;
    crawler?: Crawler;
    state?: any;
}
export interface RouterMapOptions {
    followRedirects?: boolean;
    maxDepth?: number;
    predicate?: (chunk: Chunk, chunks: Chunk[]) => boolean;
    expandPattern?: (pattern: string, router: Router) => undefined | string[] | Promise<undefined | string[]>;
    method?: 'GET' | 'HEAD';
    headers?: {
        [name: string]: string;
    };
    hostname?: string;
}
export declare function createRouter<Context extends object>(options: RouterOptions<Context>): Router<Context>;
export declare class Router<Context extends object = any> {
    context: Context;
    private matcherGenerator;
    private rootMapping;
    constructor(options: RouterOptions<Context>);
    setContext(context: Context): void;
    createObservable(url: URLDescriptor, options: RouterResolveOptions): ChunkListObservable | undefined;
    createMapObservable(urlOrDescriptor: string | Partial<URLDescriptor>, options?: RouterMapOptions): ChunksMapObservable;
    resolve(url: string | Partial<URLDescriptor> | RouterResolveOptions, options?: RouterResolveOptions): Promise<Route>;
    resolve(urls: (string | Partial<URLDescriptor>)[], options?: RouterResolveOptions): Promise<Route[]>;
    resolveSiteMap(urlOrDescriptor: string | Partial<URLDescriptor>, options?: RouterMapOptions): Promise<SiteMap<Route>>;
    resolveRouteMap(urlOrDescriptor: string | Partial<URLDescriptor>, options?: RouterMapOptions): Promise<RouteMap<Route>>;
    private getPageRoutePromise;
}
