"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function routeReducer(route, chunk) {
    if (route) {
        if (chunk.type === 'url') {
            return __assign(__assign({}, route), { chunks: route.chunks.filter(function (chunk) { return chunk.type !== 'url'; }), url: chunk.url });
        }
        if (route.type !== 'ready') {
            return route;
        }
    }
    var base = {
        lastChunk: chunk,
        method: (chunk.request && chunk.request.method),
        chunks: route ? route.chunks.concat(chunk) : [chunk],
        data: route ? route.data : {},
        headers: route ? route.headers : {},
        heads: route ? route.heads : [],
        state: route ? route.state : {},
        status: route ? route.status : 200,
        title: route && route.title,
        url: route ? route.url : chunk.url,
        views: route ? route.views : [],
    };
    switch (chunk.type) {
        case 'busy':
            return __assign(__assign({}, base), { type: 'busy' });
        case 'data':
            return __assign(__assign({}, base), { type: 'ready', data: __assign(__assign({}, base.data), chunk.data) });
        case 'error':
            return __assign(__assign({}, base), { type: 'error', error: chunk.error, status: base.status && base.status >= 400
                    ? base.status
                    : chunk.error.status || 500 });
        case 'head':
            return __assign(__assign({}, base), { type: 'ready', heads: base.heads.concat(chunk.head) });
        case 'headers':
            return __assign(__assign({}, base), { type: 'ready', headers: __assign(__assign({}, base.headers), chunk.headers) });
        case 'redirect':
            return __assign(__assign({}, base), { type: 'redirect', to: chunk.to });
        case 'state':
            return __assign(__assign({}, base), { type: 'ready', state: __assign(__assign({}, base.state), chunk.state) });
        case 'status':
            return __assign(__assign({}, base), { type: 'ready', status: chunk.status });
        case 'title':
            return __assign(__assign({}, base), { type: 'ready', title: chunk.title });
        case 'view':
            return __assign(__assign({}, base), { type: 'ready', views: base.views.concat(chunk.view) });
        default:
            return __assign(__assign({}, base), { type: 'ready' });
    }
}
exports.routeReducer = routeReducer;
//# sourceMappingURL=Route.js.map