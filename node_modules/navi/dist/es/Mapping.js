var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { joinPaths } from './URLTools';
export var KEY_WILDCARD = '\0';
export var MEMO_KEY_PREFIX = '\0';
export function createRootMapping(matcher, rootPath) {
    if (rootPath === void 0) { rootPath = ''; }
    return rootPath !== ''
        ? createMapping(rootPath, matcher)
        : {
            pattern: rootPath,
            key: '',
            regExp: new RegExp(''),
            matcher: matcher,
        };
}
export function createMapping(pattern, matcher) {
    var processedPattern = pattern;
    if (processedPattern.length > 1 && processedPattern.substr(-1) === '/') {
        if (process.env.NODE_ENV !== 'production') {
            console.warn("The pattern \"" + pattern + "\" ends with the character '/', so it has been automatically removed. To avoid this warning, don't add a final \"/\" to patterns.");
        }
        processedPattern = processedPattern.substr(0, processedPattern.length - 1);
    }
    if (processedPattern[0] !== '/') {
        if (process.env.NODE_ENV !== 'production') {
            console.warn("The pattern \"" + pattern + "\" does not start with the character '/', so it has been automatically added. To avoid this warning, make sure to add the leading \"/\" to all patterns.");
        }
        processedPattern = '/' + processedPattern;
    }
    if (/\/{2,}/.test(processedPattern)) {
        if (process.env.NODE_ENV !== 'production') {
            console.warn("The pattern \"" + pattern + " has adjacent '/' characters, which have been combined into single '/' characters. To avoid this warning, don't use adjacent '/' characters within patterns.");
        }
        processedPattern = processedPattern.replace(/\/{2,}/g, '/');
    }
    if (processedPattern.length === 0) {
        throw new Error("You cannot use an empty string \"\" as a pattern!");
    }
    var parts = processedPattern.split('/').slice(1);
    var pathParams = [];
    var keyParts = [];
    var regExpParts = ['^'];
    for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (part.length > 1 && part[0] === ':') {
            pathParams.push(part.slice(1));
            keyParts.push(KEY_WILDCARD);
            regExpParts.push('([^/]+)');
        }
        else {
            keyParts.push(part);
            regExpParts.push(escapeRegExp(part));
        }
    }
    return {
        key: keyParts.join('/'),
        matcher: matcher,
        pattern: processedPattern,
        pathParamNames: pathParams.length ? pathParams : undefined,
        regExp: processedPattern === '/' ? /^\/$/ : new RegExp(regExpParts.join('/')),
    };
}
export function matchAgainstPathname(request, mapping) {
    var match = mapping.regExp.exec(request.path || '/');
    if (!match) {
        return;
    }
    var matchedPathname = match[0];
    var unmatchedPath = request.path.slice(matchedPathname.length) || '';
    if (unmatchedPath.length && unmatchedPath[0] !== '/') {
        return;
    }
    // Set path params using RegExp match
    var params = request.params;
    if (mapping.pathParamNames) {
        params = __assign({}, request.params);
        for (var i = 0; i < mapping.pathParamNames.length; i++) {
            var paramName = mapping.pathParamNames[i];
            params[paramName] = match[i + 1];
        }
    }
    var mountpath = joinPaths(request.mountpath, matchedPathname) || '/';
    return __assign(__assign({}, request), { params: params,
        mountpath: mountpath, path: unmatchedPath, url: unmatchedPath + request.search });
}
// From http://stackoverflow.com/a/5306111/106302
// Originally from http://simonwillison.net/2006/Jan/20/escape/ (dead link)
function escapeRegExp(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
//# sourceMappingURL=Mapping.js.map