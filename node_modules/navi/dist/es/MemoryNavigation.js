var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { createMemoryHistory } from 'history';
import { Navigation } from './Navigation';
export function createMemoryNavigation(options) {
    var url = options.url || (options.request && options.request.url);
    if (!url) {
        throw new Error("createMemoryNavigation() could not find a URL.");
    }
    var history = createMemoryHistory({
        // The initial entry is ignored, and replaced during the call
        // to navigate below.
        initialEntries: ['/'],
    });
    var navigation = new Navigation({
        history: history,
        basename: options.basename,
        context: options.context,
        routes: options.routes,
        trailingSlash: options.trailingSlash,
    });
    navigation.navigate(__assign(__assign({}, options.request), { url: url, replace: true }));
    return navigation;
}
//# sourceMappingURL=MemoryNavigation.js.map