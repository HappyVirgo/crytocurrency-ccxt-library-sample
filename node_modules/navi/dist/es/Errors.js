var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// See https://stackoverflow.com/questions/30402287/extended-errors-do-not-have-message-or-stack-trace
var NaviError = /** @class */ (function (_super) {
    __extends(NaviError, _super);
    function NaviError(message) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message) || this;
        _this.__proto__ = trueProto;
        if (Error.hasOwnProperty('captureStackTrace'))
            Error.captureStackTrace(_this, _this.constructor);
        else
            Object.defineProperty(_this, 'stack', {
                value: (new Error()).stack
            });
        Object.defineProperty(_this, 'message', {
            value: message
        });
        return _this;
    }
    return NaviError;
}(Error));
export { NaviError };
var NotFoundError = /** @class */ (function (_super) {
    __extends(NotFoundError, _super);
    function NotFoundError(pathname) {
        var _this = _super.call(this, "URL not found: " + pathname) || this;
        // If you create a NotFoundError without a pathname, the
        // resolver will catch it and assign the correct pathname.
        _this.pathname = pathname;
        _this.status = 404;
        _this.name = 'NotFoundError';
        return _this;
    }
    return NotFoundError;
}(NaviError));
export { NotFoundError };
var OutOfRootError = /** @class */ (function (_super) {
    __extends(OutOfRootError, _super);
    function OutOfRootError(url) {
        var _this = _super.call(this, "URL not managed by router: " + url.href) || this;
        _this.url = url;
        _this.name = 'OutOfRootError';
        return _this;
    }
    return OutOfRootError;
}(NaviError));
export { OutOfRootError };
//# sourceMappingURL=Errors.js.map