"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var URLTools_1 = require("./URLTools");
var Observable_1 = require("./Observable");
var Mapping_1 = require("./Mapping");
var ChunksMapObservable = /** @class */ (function () {
    function ChunksMapObservable(url, rootContext, matcherGeneratorClass, rootMapping, router, options) {
        var _this = this;
        this.handleUnsubscribe = function (observer) {
            var index = _this.observers.indexOf(observer);
            if (index !== -1) {
                _this.observers.splice(index, 1);
            }
        };
        this.handleResolverUpdate = function (listenId) {
            if (listenId === _this.lastListenId) {
                _this.lastListenId++;
                if (!_this.isRefreshing) {
                    _this.refresh();
                }
                else if (!_this.isRefreshScheduled) {
                    _this.isRefreshScheduled = true;
                }
            }
        };
        this.refresh = function () { return __awaiter(_this, void 0, void 0, function () {
            var allChunks, i, _loop_1, this_1, state_1, chunksMapArray, i_1, item, lastChunk, listenId, handleUpdate, chunksMap, isSteady, i_2, _a, pathname, chunks, i_3, observer;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.isRefreshScheduled = false;
                        this.isRefreshing = true;
                        allChunks = [];
                        i = 0;
                        _loop_1 = function () {
                            var item, pathname, result, chunks, focusIndex, focusChunk, patterns, key, j, expandedPatterns, k;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        item = this_1.mapItems[i];
                                        pathname = item.pathname;
                                        result = item.matcherIterator.next();
                                        if (!item.lastResult || result.value) {
                                            item.lastResult = result;
                                        }
                                        chunks = item.lastResult.value;
                                        item.chunksCache = chunks || [];
                                        focusIndex = chunks.findIndex(function (chunk) {
                                            return chunk.type === 'error' ||
                                                (chunk.url.href.length >= item.url.href.length &&
                                                    ((chunk.type === 'mount' &&
                                                        item.lastMountPatterns !== chunk.patterns) ||
                                                        (chunk.type === 'redirect' && item.lastRedirectTo !== chunk.to)));
                                        });
                                        _a.label = 1;
                                    case 1:
                                        if (!(focusIndex >= 0 && focusIndex < chunks.length)) return [3 /*break*/, 6];
                                        focusChunk = chunks[focusIndex];
                                        focusIndex++;
                                        // If an item in the map cannot be found, throws an error, or is
                                        // no longer referenced by other items, then remove it from the
                                        // map.
                                        //
                                        // Note that later items in the map should always be "from" earlier
                                        // items, so if an earlier item is removed, its referenced items
                                        // will still be removed.
                                        if (focusChunk.type === 'error' ||
                                            (this_1.options.predicate &&
                                                !this_1.options.predicate(focusChunk, chunks))) {
                                            this_1.removeFromQueue(item);
                                            return [2 /*return*/, "continue-items"];
                                        }
                                        if (focusChunk.type === 'redirect') {
                                            item.lastRedirectTo = focusChunk.to;
                                            if (this_1.options.followRedirects) {
                                                this_1.addToQueue(focusChunk.to, item.depth + 1, item.walkedPatternLists, pathname, item.order);
                                            }
                                        }
                                        if (!(focusChunk.type === 'mount')) return [3 /*break*/, 5];
                                        patterns = focusChunk.patterns;
                                        item.lastMountPatterns = patterns;
                                        key = patterns
                                            .slice(0)
                                            .sort()
                                            .join('\n');
                                        if (!(patterns && !item.walkedPatternLists.has(key))) return [3 /*break*/, 5];
                                        item.walkedPatternLists.add(key);
                                        j = 0;
                                        _a.label = 2;
                                    case 2:
                                        if (!(j < patterns.length)) return [3 /*break*/, 5];
                                        return [4 /*yield*/, this_1.expandPatterns(URLTools_1.joinPaths(pathname, patterns[j]))];
                                    case 3:
                                        expandedPatterns = _a.sent();
                                        for (k = 0; k < expandedPatterns.length; k++) {
                                            this_1.addToQueue(expandedPatterns[k], item.depth + 1, item.walkedPatternLists, pathname, item.order.concat(j, k));
                                        }
                                        _a.label = 4;
                                    case 4:
                                        j++;
                                        return [3 /*break*/, 2];
                                    case 5: return [3 /*break*/, 1];
                                    case 6:
                                        if (chunks) {
                                            allChunks = allChunks.concat(chunks);
                                        }
                                        // Increment at the end of the loop in case the current item has
                                        // been removed, in which case the index won't change.
                                        i++;
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _b.label = 1;
                    case 1:
                        if (!(this.mapItems && i < this.mapItems.length)) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _b.sent();
                        switch (state_1) {
                            case "continue-items": return [3 /*break*/, 1];
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        // It's possible for the map to finish while waiting for expandPatterns to return.
                        if (!this.mapItems) {
                            return [2 /*return*/];
                        }
                        chunksMapArray = [];
                        for (i_1 = 0; i_1 < this.mapItems.length; i_1++) {
                            item = this.mapItems[i_1];
                            lastChunk = item.chunksCache[item.chunksCache.length - 1];
                            if (lastChunk.type !== 'mount' &&
                                lastChunk.type !== 'error' &&
                                (lastChunk.type === 'busy' ||
                                    !this.options.predicate ||
                                    this.options.predicate(lastChunk, item.chunksCache))) {
                                chunksMapArray.push([
                                    URLTools_1.joinPaths(item.pathname, '/'),
                                    item.chunksCache,
                                    item.order,
                                ]);
                            }
                        }
                        listenId = ++this.lastListenId;
                        handleUpdate = function () { return _this.handleResolverUpdate(listenId); };
                        Promise.race(allChunks.filter(isBusy).map(pickChunkPromise)).then(handleUpdate, handleUpdate);
                        chunksMapArray.sort(function (itemX, itemY) {
                            var x = itemX[2];
                            var y = itemY[2];
                            if (x.length < y.length) {
                                return -1;
                            }
                            if (x.length > y.length) {
                                return 1;
                            }
                            for (var i_4 = 0; i_4 < x.length; i_4++) {
                                if (x[i_4] < y[i_4]) {
                                    return -1;
                                }
                                if (x[i_4] > y[i_4]) {
                                    return 1;
                                }
                            }
                            return 0;
                        });
                        if (this.isRefreshScheduled) {
                            this.refresh();
                        }
                        else {
                            chunksMap = {};
                            isSteady = true;
                            for (i_2 = 0; i_2 < chunksMapArray.length; i_2++) {
                                _a = __read(chunksMapArray[i_2], 2), pathname = _a[0], chunks = _a[1];
                                if (chunks.some(function (chunk) { return chunk.type === 'busy'; })) {
                                    isSteady = false;
                                }
                                chunksMap[URLTools_1.modifyTrailingSlash(pathname, 'remove')] = chunks;
                            }
                            for (i_3 = 0; i_3 < this.observers.length; i_3++) {
                                observer = this.observers[i_3];
                                observer.next(chunksMap);
                                if (isSteady && observer.complete) {
                                    observer.complete();
                                }
                            }
                            if (isSteady) {
                                delete this.rootContext;
                                delete this.mapItems;
                                delete this.router;
                                delete this.observers;
                            }
                            this.isRefreshing = false;
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        this.observers = [];
        this.lastListenId = 0;
        this.mapItems = [];
        this.router = router;
        this.rootContext = rootContext;
        this.matcherGeneratorFunction = matcherGeneratorClass;
        this.rootMapping = rootMapping;
        this.options = options;
        this.seenPathnames = new Set();
        var pathname = url.pathname;
        // A final '/' always indicates a Page or Redirect, and it
        // doesn't really make sense to build a map of a single page/redirect.
        if (pathname.substr(-1) === '/') {
            pathname = pathname.substr(0, pathname.length - 1);
        }
        this.addToQueue(pathname, 0, new Set());
    }
    ChunksMapObservable.prototype.subscribe = function (onNextOrObserver, onError, onComplete) {
        if (!this.observers) {
            throw new Error("Can't subscribe to an already-complete RoutingObservable.");
        }
        var observer = Observable_1.createOrPassthroughObserver(onNextOrObserver, onError, onComplete);
        this.observers.push(observer);
        var subscription = new Observable_1.SimpleSubscription(this.handleUnsubscribe, observer);
        if (this.observers.length === 1) {
            this.refresh();
        }
        return subscription;
    };
    ChunksMapObservable.prototype.expandPatterns = function (pattern) {
        return __awaiter(this, void 0, void 0, function () {
            var expandedPatterns;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.expandPattern) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.options.expandPattern(pattern, this.router)];
                    case 1:
                        expandedPatterns = _a.sent();
                        if (expandedPatterns) {
                            return [2 /*return*/, expandedPatterns];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, [pattern].filter(function (pattern) { return !/\/:/.test(pattern); })];
                }
            });
        });
    };
    ChunksMapObservable.prototype.removeFromQueue = function (item) {
        var i = this.mapItems.indexOf(item);
        if (i !== -1) {
            this.mapItems.splice(i, 1);
        }
    };
    ChunksMapObservable.prototype.addToQueue = function (pathname, depth, walkedPatternLists, fromPathname, order) {
        if (order === void 0) { order = [0]; }
        if (this.seenPathnames.has(pathname)) {
            return;
        }
        if (!this.options.maxDepth || depth <= this.options.maxDepth) {
            this.seenPathnames.add(pathname);
            var url = URLTools_1.createURLDescriptor(pathname, {
                removeHash: true,
            });
            var request = {
                body: null,
                context: this.rootContext,
                headers: this.options.headers || {},
                method: this.options.method || 'HEAD',
                params: {},
                hostname: this.options.hostname || '',
                mountpath: '',
                query: url.query,
                search: url.search,
                hash: url.hash,
                path: url.pathname,
                url: url.pathname + url.search,
                originalUrl: url.href,
                state: {},
            };
            var matchRequest = Mapping_1.matchAgainstPathname(request, this.rootMapping);
            if (matchRequest) {
                this.mapItems.push({
                    url: url,
                    fromPathname: fromPathname,
                    depth: depth,
                    pathname: pathname,
                    order: order,
                    walkedPatternLists: new Set(walkedPatternLists),
                    matcherIterator: this.matcherGeneratorFunction(matchRequest),
                });
            }
        }
    };
    return ChunksMapObservable;
}());
exports.ChunksMapObservable = ChunksMapObservable;
function isBusy(chunk) {
    return chunk.type === 'busy';
}
function pickChunkPromise(chunk) {
    return chunk.promise;
}
//# sourceMappingURL=ChunksMapObservable.js.map