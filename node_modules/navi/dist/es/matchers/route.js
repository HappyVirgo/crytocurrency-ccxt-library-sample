var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { extractDefault, isPromiseLike } from '../Resolvable';
import { compose } from '../utils/compose';
import { withContext } from './withContext';
import { withData } from './withData';
import { withHead } from './withHead';
import { withHeaders } from './withHeaders';
import { withState } from './withState';
import { withStatus } from './withStatus';
import { withView } from './withView';
import { withTitle } from './withTitle';
import { createChunksMatcher } from '../createChunksMatcher';
import { createChunk } from '../Chunks';
export function route(options) {
    if (options === void 0) { options = {}; }
    var contextGetter;
    if (typeof options === 'function') {
        contextGetter = options;
    }
    else {
        var data_1 = options.data, getData_1 = options.getData, error_1 = options.error, head_1 = options.head, getHead_1 = options.getHead, headers_1 = options.headers, getHeaders_1 = options.getHeaders, state_1 = options.state, getState_1 = options.getState, status_1 = options.status, getStatus_1 = options.getStatus, title_1 = options.title, getTitle_1 = options.getTitle, view_1 = options.view, getView_1 = options.getView, other = __rest(options, ["data", "getData", "error", "head", "getHead", "headers", "getHeaders", "state", "getState", "status", "getStatus", "title", "getTitle", "view", "getView"]);
        if (process.env.NODE_ENV !== 'production') {
            var unknownKeys = Object.keys(other);
            if (unknownKeys.length) {
                console.warn("route() received unknown options " + unknownKeys
                    .map(function (x) { return "\"" + x + "\""; })
                    .join(', ') + ".");
            }
        }
        contextGetter = function getRoute(req, context) {
            var _a;
            var _this = this;
            var _b = __read(extractValue(data_1, getData_1, req, context), 2), dataMaybePromise = _b[0], a = _b[1];
            if (!dataMaybePromise) {
                dataMaybePromise = {};
            }
            else if (isPromiseLike(dataMaybePromise)) {
                dataMaybePromise = dataMaybePromise.then(inputOrEmptyObject);
            }
            var _c = __read(extractValue(headers_1, getHeaders_1, req, context), 2), headersMaybePromise = _c[0], b = _c[1];
            var _d = __read(extractValue(state_1, getState_1, req, context), 2), stateMaybePromise = _d[0], c = _d[1];
            var _e = __read(extractValue(status_1, getStatus_1, req, context), 2), statusMaybePromise = _e[0], d = _e[1];
            var _f = __read(extractValue(title_1, getTitle_1, req, context), 2), titleMaybePromise = _f[0], e = _f[1];
            var _g = __read(extractValue(head_1, getHead_1, req, context), 2), headMaybePromise = _g[0], f = _g[1];
            var viewMaybePromise;
            var g;
            if (req.method !== 'HEAD') {
                _a = __read(extractValue(view_1, getView_1, req, context), 2), viewMaybePromise = _a[0], g = _a[1];
            }
            // If anything is a promise, return a promise
            if (a || b || c || d || e || f || g) {
                return (function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = {};
                                return [4 /*yield*/, dataMaybePromise];
                            case 1:
                                _a.data = _b.sent(),
                                    _a.error = error_1;
                                return [4 /*yield*/, headMaybePromise];
                            case 2:
                                _a.head = _b.sent();
                                return [4 /*yield*/, headersMaybePromise];
                            case 3:
                                _a.headers = _b.sent();
                                return [4 /*yield*/, stateMaybePromise];
                            case 4:
                                _a.state = _b.sent();
                                return [4 /*yield*/, statusMaybePromise];
                            case 5:
                                _a.status = _b.sent();
                                return [4 /*yield*/, titleMaybePromise];
                            case 6:
                                _a.title = _b.sent();
                                return [4 /*yield*/, viewMaybePromise];
                            case 7: return [2 /*return*/, (_a.view = _b.sent(),
                                    _a)];
                        }
                    });
                }); })();
            }
            // If nothing is a promise, return a synchronous result
            else {
                return {
                    data: dataMaybePromise,
                    error: error_1,
                    head: headMaybePromise,
                    headers: headersMaybePromise,
                    state: stateMaybePromise,
                    status: statusMaybePromise,
                    title: titleMaybePromise,
                    view: viewMaybePromise,
                };
            }
        };
    }
    return compose(withContext(function (req, context) {
        return req.crawler ? {} : contextGetter(req, context);
    }), withData(function (req) { return req.context.data; }), withHead(function (req) { return req.context.head; }), withHeaders(function (req) { return req.context.headers; }), withState(function (req) { return req.context.state || null; }), withStatus(function (req) { return req.context.status; }), withTitle(function (req) { return req.context.title; }), withView(function (req) { return req.context.view; }, undefined, true), createChunksMatcher(function (req) { return req.context.error; }, undefined, function (error, request) { return (error ? [createChunk('error', request, { error: error })] : []); }));
}
function inputOrEmptyObject(x) {
    return x || {};
}
function extractValue(value, getter, request, context) {
    if (getter) {
        var valueOrPromise = getter(request, context);
        if (isPromiseLike(valueOrPromise)) {
            return [valueOrPromise.then(extractDefault), true];
        }
        return [valueOrPromise, false];
    }
    else {
        return [value, false];
    }
}
//# sourceMappingURL=route.js.map