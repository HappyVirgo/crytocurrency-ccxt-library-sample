"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Mapping_1 = require("./Mapping");
var ChunkListObservable_1 = require("./ChunkListObservable");
var ChunksMapObservable_1 = require("./ChunksMapObservable");
var Route_1 = require("./Route");
var Observable_1 = require("./Observable");
var URLTools_1 = require("./URLTools");
var Errors_1 = require("./Errors");
function createRouter(options) {
    return new Router(options);
}
exports.createRouter = createRouter;
var Router = /** @class */ (function () {
    function Router(options) {
        this.context = options.context || {};
        this.matcherGenerator = options.routes();
        var basename = options.basename;
        if (basename && basename.slice(-1) === '/') {
            basename = basename.slice(0, -1);
        }
        this.rootMapping = Mapping_1.createRootMapping(options.routes, basename);
    }
    // Please don't document this API. It should only be used through
    // "createBrowserNavigation()" or "createMemoryNavigation()"
    Router.prototype.setContext = function (context) {
        this.context = context || {};
    };
    Router.prototype.createObservable = function (url, options) {
        var request = {
            body: options.body,
            context: this.context,
            headers: options.headers || {},
            method: options.method || 'GET',
            hostname: url.hostname,
            hash: url.hash,
            mountpath: '/',
            params: url.query,
            query: url.query,
            search: url.search,
            url: url.pathname + url.search,
            originalUrl: url.href,
            path: url.pathname,
            crawler: options.crawler,
            state: options.state || {},
        };
        var matchRequest = Mapping_1.matchAgainstPathname(request, this.rootMapping);
        if (matchRequest) {
            return new ChunkListObservable_1.ChunkListObservable(url, matchRequest, this.matcherGenerator);
        }
    };
    Router.prototype.createMapObservable = function (urlOrDescriptor, options) {
        if (options === void 0) { options = {}; }
        return new ChunksMapObservable_1.ChunksMapObservable(URLTools_1.createURLDescriptor(urlOrDescriptor), this.context, this.matcherGenerator, this.rootMapping, this, options);
    };
    Router.prototype.resolve = function (urls, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var urlDescriptors;
        if (Array.isArray(urls)) {
            urlDescriptors = urls.map(function (url) { return URLTools_1.createURLDescriptor(url); });
        }
        else if (typeof urls === 'string') {
            urlDescriptors = [URLTools_1.createURLDescriptor(urls)];
        }
        else if (urls.url) {
            options = urls;
            urlDescriptors = [URLTools_1.createURLDescriptor(options.url)];
        }
        else if (options) {
            urlDescriptors = [URLTools_1.createURLDescriptor(urls)];
        }
        else {
            throw new Error("You must specify a URL for router.resolve().");
        }
        if (!urlDescriptors.length) {
            return Promise.resolve([]);
        }
        var promises = urlDescriptors.map(function (url) {
            return _this.getPageRoutePromise(url, options);
        });
        return !Array.isArray(urls) ? promises[0] : Promise.all(promises);
    };
    Router.prototype.resolveSiteMap = function (urlOrDescriptor, options) {
        if (options === void 0) { options = {}; }
        return Observable_1.createPromiseFromObservable(this.createMapObservable(urlOrDescriptor, options)).then(function (chunksMap) {
            var routeMap = {};
            var redirectMap = {};
            var urls = Object.keys(chunksMap);
            for (var i = 0; i < urls.length; i++) {
                var url = urls[i];
                var chunks = chunksMap[url];
                var lastChunk = chunks[chunks.length - 1];
                if (lastChunk.type === 'redirect') {
                    redirectMap[url] = lastChunk.to;
                    continue;
                }
                else {
                    routeMap[url] = [{ type: 'url', url: URLTools_1.createURLDescriptor(url) }]
                        .concat(chunks)
                        .reduce(Route_1.routeReducer, undefined);
                }
            }
            return {
                routes: routeMap,
                redirects: redirectMap,
            };
        });
    };
    Router.prototype.resolveRouteMap = function (urlOrDescriptor, options) {
        if (options === void 0) { options = {}; }
        return this.resolveSiteMap(urlOrDescriptor, options).then(function (siteMap) { return siteMap.routes; });
    };
    Router.prototype.getPageRoutePromise = function (url, options) {
        var _this = this;
        var observable = this.createObservable(url, options);
        if (!observable) {
            return Promise.reject(new Errors_1.OutOfRootError(url));
        }
        return Observable_1.createPromiseFromObservable(observable).then(function (chunks) {
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                if (chunk.type === 'busy') {
                    break;
                }
                if (chunk.type === 'redirect' && options.followRedirects) {
                    return _this.getPageRoutePromise(URLTools_1.createURLDescriptor(chunk.to), options);
                }
                if (chunk.type === 'error') {
                    throw chunk.error;
                }
            }
            return [{ type: 'url', url: URLTools_1.createURLDescriptor(url) }]
                .concat(chunks)
                .reduce(Route_1.routeReducer, undefined);
        });
    };
    return Router;
}());
exports.Router = Router;
//# sourceMappingURL=Router.js.map