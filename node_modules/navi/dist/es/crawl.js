var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createPromiseFromObservable } from './Observable';
import { createRouter } from './Router';
import { createURLDescriptor, joinPaths, modifyTrailingSlash } from './URLTools';
export function crawl(options) {
    return __awaiter(this, void 0, void 0, function () {
        var router, url, predicate, expandPattern, crawler, chunkListObservable, chunkList, paths, redirects, i, chunk, pathname, j, subChunk;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    router = createRouter({
                        basename: options.basename,
                        context: options.context,
                        routes: options.routes,
                    });
                    url = createURLDescriptor(options.root || '');
                    predicate = options.predicate || (function () { return true; });
                    expandPattern = options.expandPattern || (function (pattern) { return [pattern || '']; });
                    crawler = function (pattern, parentRequest) { return __awaiter(_this, void 0, void 0, function () {
                        var patterns;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, expandPattern(pattern)];
                                case 1:
                                    patterns = (_a.sent()) || [];
                                    return [2 /*return*/, patterns
                                            .map(function (pattern) { return ({
                                            headers: parentRequest.headers,
                                            url: createURLDescriptor(joinPaths(parentRequest.mountpath, pattern)),
                                            context: parentRequest.headers,
                                        }); })
                                            .filter(predicate)];
                            }
                        });
                    }); };
                    chunkListObservable = router.createObservable(url, {
                        crawler: crawler,
                        headers: options.headers,
                        method: 'HEAD',
                    });
                    return [4 /*yield*/, createPromiseFromObservable(chunkListObservable)
                        // Build a list of pages and redirects from the list of chunks
                    ];
                case 1:
                    chunkList = _a.sent();
                    paths = [];
                    redirects = {};
                    chunk: for (i = 0; i < chunkList.length; i++) {
                        chunk = chunkList[i];
                        if (chunk.type === 'crawl') {
                            pathname = chunk.url.pathname;
                            if (pathname.indexOf(':') !== -1) {
                                continue;
                            }
                            for (j = i + 1; j < chunkList.length; j++, i++) {
                                subChunk = chunkList[j];
                                if (subChunk.type === 'crawl' || subChunk.type === 'mount') {
                                    break;
                                }
                                if (subChunk.type === 'redirect') {
                                    redirects[pathname] = subChunk.to;
                                    continue chunk;
                                }
                            }
                            paths.push(pathname);
                        }
                    }
                    return [2 /*return*/, {
                            paths: options.trailingSlash !== null
                                ? paths.map(function (path) { return modifyTrailingSlash(path, options.trailingSlash || 'remove'); })
                                : paths,
                            redirects: redirects,
                        }];
            }
        });
    });
}
//# sourceMappingURL=crawl.js.map