var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { joinPaths } from './URLTools';
import { NotFoundError } from './Errors';
import { createChunk } from './Chunks';
export default function resolveChunks(maybeResolvable, request, createChunks) {
    var resolvable, maybeValue, result, promise, unwrappedPromise, busyChunks, error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                resolvable = typeof maybeResolvable === 'function'
                    ? maybeResolvable
                    : function () { return maybeResolvable; };
                try {
                    maybeValue = resolvable(request, request.context);
                }
                catch (e) {
                    maybeValue = Promise.reject(e);
                }
                if (!!isPromiseLike(maybeValue)) return [3 /*break*/, 1];
                result = createChunks(maybeValue);
                return [3 /*break*/, 7];
            case 1:
                promise = maybeValue.then(extractDefault);
                unwrappedPromise = unwrapPromise(promise);
                busyChunks = [createChunk('busy', request, { promise: promise })];
                _a.label = 2;
            case 2:
                if (!!unwrappedPromise.outcome) return [3 /*break*/, 4];
                return [4 /*yield*/, busyChunks];
            case 3:
                _a.sent();
                return [3 /*break*/, 2];
            case 4:
                if (!(unwrappedPromise.outcome === 'rejected')) return [3 /*break*/, 6];
                error = unwrappedPromise.error;
                if (error instanceof NotFoundError && !error.pathname) {
                    error.pathname = joinPaths(request.mountpath, request.path);
                }
                return [4 /*yield*/, [createChunk('error', request, { error: error })]];
            case 5:
                _a.sent();
                return [3 /*break*/, 7];
            case 6:
                result = createChunks(unwrappedPromise.value);
                _a.label = 7;
            case 7:
                if (!result) return [3 /*break*/, 11];
                if (!Array.isArray(result)) return [3 /*break*/, 9];
                return [4 /*yield*/, result.length ? result : []];
            case 8:
                _a.sent();
                return [3 /*break*/, 11];
            case 9: return [5 /*yield**/, __values(result)];
            case 10:
                _a.sent();
                _a.label = 11;
            case 11: return [2 /*return*/];
        }
    });
}
function unwrapPromise(promise) {
    var result = {};
    promise.then(function (value) {
        result.value = value;
        result.outcome = 'resolved';
    }, function (error) {
        result.error = error;
        result.outcome = 'rejected';
    });
    return result;
}
// Not all promise libraries use the ES6 `Promise` constructor,
// so there isn't a better way to check if it's a promiseÂ :-(
export function isPromiseLike(x) {
    return !!x && !!x['then'];
}
export function extractDefault(value) {
    if (hasDefault(value)) {
        return value.default;
    }
    else {
        return value;
    }
}
function hasDefault(value) {
    return value && typeof value === 'object' && 'default' in value;
}
//# sourceMappingURL=Resolvable.js.map